#!/bin/bash

# create_zome.sh - Automated zome creation with nondominium structure
# Usage: ./create_zome.sh <zome_name> [zome_type: coordinator| integrity| both]

set -e

ZOME_NAME=$1
ZOME_TYPE=${2:-both}
PROJECT_ROOT=$(pwd)
DNAS_DIR="$PROJECT_ROOT/dnas/nondominium"
ZOMES_DIR="$DNAS_DIR/zomes"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Validate inputs
if [ -z "$ZOME_NAME" ]; then
    log_error "Zome name is required"
    echo "Usage: $0 <zome_name> [zome_type: coordinator| integrity| both]"
    exit 1
}

if [ ! -d "$DNAS_DIR" ]; then
    log_error "nondominium DNA directory not found at $DNAS_DIR"
    log_error "Please run this script from the nondominium project root"
    exit 1
fi

# Create zome structure
create_zome_structure() {
    local zome_type=$1
    local zome_dir="$ZOMES_DIR/$zome_type/zome_$ZOME_NAME"
    local src_dir="$zome_dir/src"

    log_info "Creating $zome_type zome: $ZOME_NAME"

    # Create directories
    mkdir -p "$src_dir"

    # Create Cargo.toml
    cat > "$zome_dir/Cargo.toml" << EOF
[package]
name = "zome_$ZOME_NAME"
version = "0.1.0"
edition = "2021"

[lib]
name = "zome_$ZOME_NAME"
crate-type = ["cdylib"]

[dependencies]
hdk = { workspace = true }
hdi = { workspace = true }
serde = { workspace = true }
thiserror = { workspace = true }

[zome_traits]
hdk_integrity = "$ZOME_NAME"
EOF

    # Create lib.rs
    cat > "$src_dir/lib.rs" << EOF
use hdk::prelude::*;

// Entry type definitions will be generated by HDI
// TODO: Add your entry types here

// TODO: Add your extern functions here

#[derive(Debug, thiserror::Error)]
pub enum ${ZOME_NAME^}Error {
  #[error("Entry not found: {0}")]
  EntryNotFound(String),

  #[error("Serialization error: {0}")]
  SerializationError(String),

  #[error("Entry operation failed: {0}")]
  EntryOperationFailed(String),

  #[error("Invalid input: {0}")]
  InvalidInput(String),
}

impl From<${ZOME_NAME^}Error> for WasmError {
    fn from(err: ${ZOME_NAME^}Error) -> Self {
        wasm_error!(WasmErrorInner::Guest(err.to_string()))
    }
}

#[hdk_extern]
pub fn init(_: ()) -> ExternResult<InitCallbackResult> {
    Ok(InitCallbackResult::Pass)
}
EOF

    log_info "Created $zome_type zome structure at $zome_dir"
}

# Update DNA manifest if coordinator zome
update_dna_manifest() {
    if [ "$ZOME_TYPE" = "coordinator" ] || [ "$ZOME_TYPE" = "both" ]; then
        log_info "Adding coordinator zome to DNA manifest..."

        # This would need to be done manually as it requires editing workdir/dna.yaml
        log_warn "Please manually add zome_$ZOME_NAME to workdir/dna.yaml under coordinator zomes"
    fi
}

# Main execution
log_info "Creating zome: $ZOME_NAME (type: $ZOME_TYPE)"

case $ZOME_TYPE in
    "coordinator")
        create_zome_structure "coordinator"
        update_dna_manifest
        ;;
    "integrity")
        create_zome_structure "integrity"
        ;;
    "both")
        create_zome_structure "integrity"
        create_zome_structure "coordinator"
        update_dna_manifest
        ;;
    *)
        log_error "Invalid zome type: $ZOME_TYPE"
        log_error "Valid types: coordinator, integrity, both"
        exit 1
        ;;
esac

log_info "Zome creation completed successfully!"
log_info "Next steps:"
log_info "1. Add your entry types to the integrity zome's lib.rs"
log_info "2. Implement your coordinator functions in the coordinator zome's lib.rs"
log_info "3. Add the coordinator zome to workdir/dna.yaml"
log_info "4. Run 'bun run build:zomes' to compile your new zome"